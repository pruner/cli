// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface AltCoverRoot {
	CoverageSession: CoverageSession[];
}

export interface CoverageSession {
	"@_xmlns:xsd": string;
	"@_xmlns:xsi": string;
	Summary: { [key: string]: string }[];
	Modules: CoverageSessionModule[];
}

export interface CoverageSessionModule {
	Module: ModuleModule[];
}

export interface ModuleModule {
	"@_hash": string;
	Summary: { [key: string]: string }[];
	ModulePath: string;
	ModuleTime: string;
	ModuleName: string;
	Files: ModuleFile[];
	Classes: ModuleClass[];
	TrackedMethods: TrackedMethodsTrackedMethod[];
}

export interface ModuleClass {
	Class: ClassClass[];
}

export interface ClassClass {
	Summary: { [key: string]: string }[];
	FullName: string;
	Methods: ClassMethod[];
}

export interface ClassMethod {
	Method: MethodMethod[];
}

export interface MethodMethod {
	"@_visited": string;
	"@_cyclomaticComplexity": string;
	"@_nPathComplexity": string;
	"@_sequenceCoverage": string;
	"@_branchCoverage": string;
	"@_isConstructor": string;
	"@_isStatic": string;
	"@_isGetter": string;
	"@_isSetter": string;
	"@_crapScore": string;
	Summary: { [key: string]: string }[];
	MetadataToken: number;
	Name: string;
	FileRef?: FileRef[];
	SequencePoints: SequencePoint[];
	BranchPoints: string;
	MethodPoint: Point[];
}

export interface FileRef {
	"@_uid": string;
}

export interface Point {
	"@_xsi:type"?: XsiType;
	"@_vc": string;
	"@_uspid": string;
	"@_ordinal": string;
	"@_offset": string;
	"@_sl"?: string;
	"@_sc"?: string;
	"@_el"?: string;
	"@_ec"?: string;
	"@_bec"?: string;
	"@_bev"?: string;
	"@_fileid"?: string;
	Times?: string;
	TrackedMethodRefs?: TrackedMethodRef[];
}

export enum XsiType {
	SequencePoint = "SequencePoint",
}

export interface TrackedMethodRef {
	TrackedMethodRef: {
		"@_uid": string;
		"@_vc": string;
	}[];
}

export interface SequencePoint {
	SequencePoint: Point[];
}

export interface ModuleFile {
	File: FileFile[];
}

export interface FileFile {
	"@_uid": string;
	"@_fullPath": string;
}

export interface TrackedMethodsTrackedMethod {
	TrackedMethod: TrackedMethodTrackedMethod[];
}

export interface TrackedMethodTrackedMethod {
	"@_uid": string;
	"@_token": string;
	"@_name": string;
	"@_strategy": Strategy;
	"@_entry": string;
	"@_exit": string;
}

export enum Strategy {
	TestMethod = "[TestMethod]",
}
